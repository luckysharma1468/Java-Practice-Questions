package recursion;

import java.util.*;

/*
 * Given a long vector of strings, print the strings that contain the strings
 *  generated by numeric string str.

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
For example, if the input is 26 and then string will be coding, 
since 26 can produce co which is contained in coding.

Input Format
A numeric string str

Constraints
len(str) < 10
No of strings in the vector < 10

Output Format
Each matched string from the given vector.

Sample Input
34
Sample Output
vidhi
divyam
sneha
Explanation
34 will result into combinations :

*dg         *eg         *fg
*dh            *eh         *fh
*di            *ei         *fi
Corresponding strings are output.

vidhi contains dh
divyam contains di
sneha contains eh
 */

public class question5 {
	static String[] table = { " ", ".+@$", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

	static String searchIn[] = { "prateek", "sneha", "deepak", "arnav", "shikha", "palak", "utkarsh", "divyam", "vidhi",
			"sparsh", "akku" };

	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		String s = scan.nextLine();

		ArrayList<String> result = smartKeypad(s);

		for (int i = 0; i < result.size(); i++) {
			String temp = result.get(i);

			for (int j = 0; j < searchIn.length; j++) {
				String search = searchIn[j];

				if (search.contains(temp)) {
					System.out.println(search);
				}
			}
		}

	}

	public static ArrayList<String> smartKeypad(String s) {

		if (s.length() == 0) {
			ArrayList<String> list = new ArrayList<>();
			list.add("");
			return list;
		}

		char cc = s.charAt(0);
		ArrayList<String> result = new ArrayList<>();
		ArrayList<String> recRes = smartKeypad(s.substring(1));

		int CN = cc - '0';
		String letters = table[CN];

		for (int i = 0; i < letters.length(); i++) {

			char cl = letters.charAt(i);

			for (int j = 0; j < recRes.size(); j++) {
				String temp = recRes.get(j);
				temp = cl + temp;
				result.add(temp);
			}
		}

		return result;

	}
}
